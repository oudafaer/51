C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE TFTLCD
OBJECT MODULE PLACED IN .\output\tftlcd.obj
COMPILER INVOKED BY: D:\KEIL5\C51\BIN\C51.EXE APP\tftlcd\tftlcd.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\User;.\Public;
                    -.\GUI;.\APP\tftlcd;.\APP\touch) DEBUG OBJECTEXTEND PRINT(.\output\tftlcd.lst) TABS(2) OBJECT(.\output\tftlcd.obj)

line level    source

   1          #include "tftlcd.h"
   2          #include "font.h" 
   3          #include "uart.h"
   4          #include "stdlib.h"
   5          
   6          
   7          
   8          //LCD的画笔颜色和背景色    
   9          u16 FRONT_COLOR=WHITE;  //画笔颜色
  10          u16 BACK_COLOR=BLACK;  //背景色 
  11          
  12          _tftlcd_data tftlcd_data; 
  13          
  14          void Delay(unsigned int dly)
  15          {
  16   1          unsigned int i,j;
  17   1      
  18   1          for(i=0;i<dly;i++)
  19   1            for(j=0;j<255;j++);
  20   1      }
  21          //写寄存器函数
  22          //cmd:寄存器值
  23          void LCD_WriteCmd(u16 cmd)
  24          {
  25   1      #ifdef TFT22_R61503B
  26   1      unsigned char cmdH, cmdL;
  27   1        cmdH = cmd >> 8;
  28   1        cmdL = cmd & 0x00FF;
  29   1        
  30   1        
  31   1        TFT_WR = 1;       //初始化WR
  32   1        TFT_CS = 0;       //打开片选
  33   1        
  34   1        TFT_RD = 1;           //选择写
  35   1        TFT_RS = 0;       //选择命令
  36   1        
  37   1        
  38   1        TFT_DATAPORTH = cmdH; //放置命令数据
  39   1        TFT_WR = 0;       //写入时序
  40   1        
  41   1        TFT_WR = 1;
  42   1        TFT_DATAPORTH = cmdL;
  43   1        TFT_WR = 0;       //写入时序
  44   1        TFT_WR = 1;
  45   1        
  46   1        TFT_CS = 1;       //关闭片选 
  47   1      #endif
  48   1      #ifdef TFT22_ILI9225B
                TFT_WR=1;
                TFT_CS=0;
                TFT_RD=1;
                TFT_RS=0;
              
                TFT_DATAPORTH=cmd>>8;
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 2   

                TFT_WR=0;
                TFT_WR=1;
              
                TFT_DATAPORTH=cmd&0x00ff;
                TFT_WR=0;
                TFT_WR=1;
              
                TFT_CS=1;
              #endif
  64   1      
  65   1      #ifdef TFT24_ST7781R  
                TFT_CS=0;
                TFT_RS=0;
                TFT_DATAPORTH=cmd>>8;
                TFT_DATAPORTL=cmd;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1;
              #endif
  74   1      
  75   1      #ifdef TFT26_R61509V  
                TFT_CS=0;
                TFT_RS=0;
                TFT_DATAPORTH=cmd>>8;
                TFT_DATAPORTL=cmd;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1;
              #endif
  84   1      
  85   1      #ifdef TFT26_ILI9325D 
                TFT_CS=0;
                TFT_RS=0;
                TFT_DATAPORTH=cmd>>8;
                TFT_DATAPORTL=cmd;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1;
              #endif
  94   1      }
  95          
  96          //写数据
  97          //dat:要写入的值
  98          void LCD_WriteData(u16 dat)
  99          {
 100   1        #ifdef TFT22_R61503B
 101   1         unsigned char datH, datL;
 102   1        datH = dat >> 8;
 103   1        datL = dat & 0xFF;
 104   1        
 105   1        TFT_WR = 1;       //初始化WR
 106   1        TFT_CS = 0;       //打开片选
 107   1          
 108   1        TFT_RD = 1;           //选择写
 109   1        TFT_RS = 1;       //选择发送数据
 110   1        
 111   1      
 112   1        TFT_DATAPORTH = datH;  //放置命令数据
 113   1        TFT_WR = 0;       //写入时序
 114   1        TFT_WR = 1;
 115   1      
 116   1        TFT_DATAPORTH = datL; 
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 3   

 117   1      
 118   1        TFT_WR = 0;       //写入时序
 119   1        TFT_WR = 1;
 120   1        
 121   1         TFT_CS = 1;        //关闭片选
 122   1        #endif
 123   1      #ifdef TFT22_ILI9225B
                TFT_WR=1;
                TFT_CS=0;
                TFT_RD=1;
                TFT_RS=1;
                   
                TFT_DATAPORTH=dat>>8;
                TFT_WR=0;
                TFT_WR=1;
                TFT_DATAPORTH=dat&0x00ff;
                TFT_WR=0;
                TFT_WR=1;
              
                TFT_CS=1; 
              #endif
 138   1      
 139   1      #ifdef TFT24_ST7781R
                TFT_CS=0;
                TFT_RS=1;  
                TFT_DATAPORTH=dat>>8;
                TFT_DATAPORTL=dat;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1; 
              #endif
 148   1      
 149   1      #ifdef TFT26_R61509V
                TFT_CS=0;
                TFT_RS=1;  
                TFT_DATAPORTH=dat>>8;
                TFT_DATAPORTL=dat;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1; 
              #endif  
 158   1      
 159   1      #ifdef TFT26_ILI9325D
                TFT_CS=0;
                TFT_RS=1;  
                TFT_DATAPORTH=dat>>8;
                TFT_DATAPORTL=dat;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1; 
              #endif  
 168   1      }
 169          
 170          void LCD_WriteData_Color(u16 color)
 171          {
 172   1      #ifdef TFT22_R61503B
 173   1         unsigned char datH, datL;
 174   1        datH = color >> 8;
 175   1        datL = color & 0xFF;
 176   1        
 177   1        TFT_WR = 1;       //初始化WR
 178   1        TFT_CS = 0;       //打开片选
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 4   

 179   1          
 180   1        TFT_RD = 1;           //选择写
 181   1        TFT_RS = 1;       //选择发送数据
 182   1        
 183   1      
 184   1        TFT_DATAPORTH = datH;  //放置命令数据
 185   1        TFT_WR = 0;       //写入时序
 186   1        TFT_WR = 1;
 187   1      
 188   1        TFT_DATAPORTH = datL; 
 189   1      
 190   1        TFT_WR = 0;       //写入时序
 191   1        TFT_WR = 1;
 192   1        
 193   1         TFT_CS = 1;        //关闭片选
 194   1        #endif
 195   1      #ifdef TFT22_ILI9225B
                TFT_WR=1;
                TFT_CS=0;
                TFT_RD=1;
                TFT_RS=1;
                   
                TFT_DATAPORTH=color>>8;
                TFT_WR=0;
                TFT_WR=1;
                TFT_DATAPORTH=color&0x00ff;
                TFT_WR=0;
                TFT_WR=1;
              
                TFT_CS=1; 
              #endif
 210   1      
 211   1      #ifdef TFT24_ST7781R
                TFT_CS=0;
                TFT_RS=1;  
                TFT_DATAPORTH=color>>8;
                TFT_DATAPORTL=color;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1; 
              #endif
 220   1      
 221   1      #ifdef TFT26_R61509V
                TFT_CS=0;
                TFT_RS=1;  
                TFT_DATAPORTH=color>>8;
                TFT_DATAPORTL=color;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1; 
              #endif
 230   1      
 231   1      #ifdef TFT26_ILI9325D
                TFT_CS=0;
                TFT_RS=1;  
                TFT_DATAPORTH=color>>8;
                TFT_DATAPORTL=color;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1; 
              #endif  
 240   1      }
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 5   

 241          
 242          void LCD_WriteCmdData(u16 cmd,u16 dat)
 243          {
 244   1        LCD_WriteCmd(cmd);
 245   1        LCD_WriteData(dat);
 246   1      }
 247          
 248          //读数据
 249          //返回值:读到的值
 250          u16 LCD_ReadData(void)
 251          {
 252   1        u16 ram;
 253   1      
 254   1        TFT_DATAPORTH=0xff;
 255   1        TFT_DATAPORTL=0xff;
 256   1      
 257   1      #ifdef TFT22_R61503B
 258   1        
 259   1        TFT_CS=0;
 260   1        TFT_RS=1;
 261   1        TFT_RD=0;
 262   1        _nop_();
 263   1        ram=TFT_DATAPORTH;
 264   1        ram<<=8;  
 265   1      
 266   1        TFT_RD=1; 
 267   1        TFT_RD=0;
 268   1        _nop_();
 269   1        ram|=TFT_DATAPORTH;
 270   1        TFT_RD=1;
 271   1        TFT_CS=1;
 272   1        #endif
 273   1      #ifdef TFT22_ILI9225B
                TFT_CS=0;
                TFT_RS=1;
                TFT_RD=0;
                _nop_();
                ram=TFT_DATAPORTH;
                ram<<=8;  
              
                TFT_RD=1; 
                TFT_RD=0;
                _nop_();
                ram|=TFT_DATAPORTH;
                TFT_RD=1;
                TFT_CS=1;
              #endif
 288   1      
 289   1      #ifdef TFT24_ST7781R
                TFT_CS=0;
                TFT_RS=1;
                TFT_RD=0;
                _nop_();
                ram=TFT_DATAPORTH;
                ram<<=8;
                ram|=TFT_DATAPORTL;  
                TFT_RD=1;
                TFT_CS=1;
              #endif
 300   1      
 301   1      #ifdef TFT26_R61509V
                TFT_CS=0;
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 6   

                TFT_RS=1;
                TFT_RD=0;
                _nop_();
                ram=TFT_DATAPORTH;
                ram<<=8;
                ram|=TFT_DATAPORTL;
                TFT_RD=1; 
                TFT_CS=1;
              #endif
 312   1      
 313   1      #ifdef TFT26_ILI9325D
                TFT_CS=0;
                TFT_RS=1;
                TFT_RD=0;
                _nop_();
                ram=TFT_DATAPORTH;
                ram<<=8;
                ram|=TFT_DATAPORTL;
                TFT_RD=1; 
                TFT_CS=1;
              #endif
 324   1      
 325   1        return ram; 
 326   1      }
 327          
 328          //设置LCD显示方向
 329          //dir:0,竖屏；1,横屏
 330          void LCD_Display_Dir(u8 dir)
 331          {
 332   1        
 333   1        if(dir==0)  //默认竖屏方向
 334   1        {
 335   2      #ifdef TFT22_R61503B
 336   2          LCD_WriteCmdData(0x0001,0x0500); //Output Direct
 337   2          LCD_WriteCmdData(0x0003, 0x1030);   //设置彩屏显示方向的寄存器
 338   2      #endif
 339   2      #ifdef TFT22_ILI9225B   
                  LCD_WriteCmdData(0x0001, 0x011C); //Output Direct
                  LCD_WriteCmdData(0x0003, 0x1030);   //设置彩屏显示方向的寄存器
              #endif
 343   2      
 344   2      #ifdef TFT24_ST7781R    
                  LCD_WriteCmdData(0x0001, 0x0100); //Output Direct
                  LCD_WriteCmd(0x0003);   //设置彩屏显示方向的寄存器
                  LCD_WriteData(0x5030);
              #endif
 349   2      
 350   2      #ifdef TFT26_R61509V    
                  LCD_WriteCmdData(0x0001, 0x0100); //Output Direct
                  LCD_WriteCmdData(0x0003, 0x1030);   //设置彩屏显示方向的寄存器
              #endif
 354   2      
 355   2      #ifdef TFT26_ILI9325D   
                  LCD_WriteCmdData(0x0001, 0x0100); //Output Direct
                  LCD_WriteCmdData(0x0003, 0x1030);   //设置彩屏显示方向的寄存器
              #endif
 359   2      
 360   2          tftlcd_data.height=HEIGHT;
 361   2          tftlcd_data.width=WIDTH;
 362   2      
 363   2          tftlcd_data.dir=0;  
 364   2        }
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 7   

 365   1        else
 366   1        {
 367   2      
 368   2      #ifdef TFT22_R61503B
 369   2          LCD_WriteCmdData(0x0001, 0x0400); //Output Direct
 370   2          LCD_WriteCmdData(0x0003, 0x1038);   //设置彩屏显示方向的寄存器#endif
 371   2      #endif
 372   2      
 373   2      #ifdef TFT22_ILI9225B   
                  LCD_WriteCmdData(0x0001, 0x031C); //Output Direct
                  LCD_WriteCmdData(0x0003, 0x1038);   //设置彩屏显示方向的寄存器#endif
              #endif
 377   2      
 378   2      #ifdef TFT24_ST7781R
                  LCD_WriteCmdData(0x0001, 0x0000); //Output Direct   
                  LCD_WriteCmd(0x0003);   //设置彩屏显示方向的寄存器
                  LCD_WriteData(0x5038);
              #endif
 383   2      
 384   2      #ifdef TFT26_R61509V    
                  LCD_WriteCmdData(0x0001, 0x0000); //Output Direct
                  LCD_WriteCmdData(0x0003, 0x1038);   //设置彩屏显示方向的寄存器
              #endif
 388   2      
 389   2      #ifdef TFT26_ILI9325D   
                  LCD_WriteCmdData(0x0001, 0x0000); //Output Direct
                  LCD_WriteCmdData(0x0003, 0x1038);   //设置彩屏显示方向的寄存器
              #endif
 393   2      
 394   2            tftlcd_data.height=WIDTH;
 395   2          tftlcd_data.width=HEIGHT;
 396   2      
 397   2          tftlcd_data.dir=1;
 398   2        }
 399   1      }
 400          
 401          
 402          void TFTLCD_Init(void)
 403          {
 404   1        TFT_RST=1;  
 405   1        delay_ms(100);
 406   1        
 407   1        TFT_RST=0;
 408   1        delay_ms(100);
 409   1      
 410   1        TFT_RST=1;
 411   1        delay_ms(100);
 412   1      
 413   1      #ifdef TFT22_R61503B
 414   1        LCD_WriteCmd(0X0000);         
 415   1        tftlcd_data.id=LCD_ReadData(); 
 416   1      #endif  
 417   1        #ifdef TFT22_ILI9225B 
                LCD_WriteCmd(0X0000);         
                tftlcd_data.id=LCD_ReadData();    
              #endif
 421   1      
 422   1      #ifdef TFT24_ST7781R  
                LCD_WriteCmd(0X0000);         
                tftlcd_data.id=LCD_ReadData();    
              #endif
 426   1      
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 8   

 427   1      #ifdef TFT26_R61509V  
                LCD_WriteCmd(0X0000);         
                tftlcd_data.id=LCD_ReadData();    
              #endif
 431   1      
 432   1      #ifdef TFT26_ILI9325D 
                LCD_WriteCmd(0X0000);         
                tftlcd_data.id=LCD_ReadData();    
              #endif
 436   1      
 437   1        printf(" LCD ID:%x\r\n",tftlcd_data.id); //打印LCD ID
 438   1        
 439   1      
 440   1      #ifdef TFT22_R61503B
 441   1        
 442   1          LCD_WriteCmd(0x0000);LCD_WriteData(0x0001);
 443   1        delay_10us(10);
 444   1        LCD_WriteCmd(0x0007);LCD_WriteCmd(0x0000);
 445   1        LCD_WriteCmd(0x0012);LCD_WriteCmd(0x0000);
 446   1        LCD_WriteCmd(0x00a4);LCD_WriteCmd(0x0001);
 447   1        delay_10us(10);
 448   1        LCD_WriteCmd(0x0070);LCD_WriteData(0x9b00);
 449   1        LCD_WriteCmd(0x0007);LCD_WriteData(0x0031);
 450   1        LCD_WriteCmd(0x0018);LCD_WriteData(0x0001);
 451   1        
 452   1        LCD_WriteCmd(0x0010);LCD_WriteData(0x11b0); 
 453   1        LCD_WriteCmd(0x0011);LCD_WriteData(0x0007);        
 454   1        LCD_WriteCmd(0x0012);LCD_WriteData(0x1017);  
 455   1        LCD_WriteCmd(0x0013);LCD_WriteData(0x850d); 
 456   1        LCD_WriteCmd(0x0014);LCD_WriteData(0x8000); 
 457   1        LCD_WriteCmd(0x0012);LCD_WriteData(0x103c);  
 458   1        Delay(150);
 459   1        
 460   1        
 461   1        LCD_WriteCmd(0x0001);LCD_WriteData(0x0500);
 462   1        LCD_WriteCmd(0x0002);LCD_WriteData(0x0700);
 463   1        LCD_WriteCmd(0x0003);LCD_WriteData(0x1030);
 464   1        
 465   1        LCD_WriteCmd(0x0008);LCD_WriteData(0x0808);
 466   1        LCD_WriteCmd(0x000b);LCD_WriteData(0x1100);
 467   1        LCD_WriteCmd(0x000c);LCD_WriteData(0x0000);
 468   1        LCD_WriteCmd(0x000f);LCD_WriteData(0x1401);
 469   1        
 470   1        LCD_WriteCmd(0x0015);LCD_WriteData(0x0000);
 471   1        LCD_WriteCmd(0x0020);LCD_WriteData(0x0000);
 472   1        LCD_WriteCmd(0x0021);LCD_WriteData(0x0000);
 473   1      
 474   1      //  LCD_WriteCmd(0x0030);LCD_WriteData(0x0f0f);
 475   1      //  LCD_WriteCmd(0x0031);LCD_WriteData(0x0a0b);
 476   1      //  LCD_WriteCmd(0x0032);LCD_WriteData(0x0c0e);
 477   1      //  LCD_WriteCmd(0x0033);LCD_WriteData(0x0d0d);
 478   1      //  LCD_WriteCmd(0x0034);LCD_WriteData(0x0a0a);
 479   1      //  LCD_WriteCmd(0x0035);LCD_WriteData(0x0909);
 480   1      //  LCD_WriteCmd(0x0036);LCD_WriteData(0x0c0c);
 481   1      //  LCD_WriteCmd(0x0037);LCD_WriteData(0x0f0c);
 482   1      //  LCD_WriteCmd(0x0038);LCD_WriteData(0x0606);
 483   1      //  LCD_WriteCmd(0x0039);LCD_WriteData(0x0606);
 484   1      
 485   1        LCD_WriteCmd(0x0050);LCD_WriteData(0x0000);
 486   1        LCD_WriteCmd(0x0051);LCD_WriteData(0x00af);
 487   1        LCD_WriteCmd(0x0052);LCD_WriteData(0x0000);
 488   1        LCD_WriteCmd(0x0053);LCD_WriteData(0x00db);
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 9   

 489   1        
 490   1        LCD_WriteCmd(0x0070);LCD_WriteData(0x1b00);
 491   1        LCD_WriteCmd(0x0071);LCD_WriteData(0x0000);
 492   1        
 493   1        LCD_WriteCmd(0x0090);LCD_WriteData(0x0000);
 494   1        LCD_WriteCmd(0x0091);LCD_WriteData(0x0100);
 495   1        LCD_WriteCmd(0x0092);LCD_WriteData(0x0001);
 496   1        LCD_WriteCmd(0x0059);LCD_WriteData(0x050c);
 497   1        LCD_WriteCmd(0x0090);LCD_WriteData(0x0010);
 498   1        LCD_WriteCmd(0x0092);LCD_WriteData(0x0600);
 499   1      
 500   1        LCD_WriteCmd(0x0007);LCD_WriteData(0x0233);
 501   1        Delay(50);
 502   1      //  LCD_WriteCmd(0x0007);LCD_WriteData(0x0133);
 503   1      //  Delay(50);
 504   1      
 505   1        LCD_WriteCmd(0x0022);
 506   1      #endif  
 507   1      
 508   1         
 509   1      #ifdef TFT22_ILI9225B
                LCD_WriteCmdData(0x0001, 0x011C); // set SS and NL bit
                LCD_WriteCmdData(0x0002, 0x0100); // set 1 line inversion
                LCD_WriteCmdData(0x0003, 0x1030); // set GRAM write direction and BGR=1.
                LCD_WriteCmdData(0x0008, 0x0808); // set BP and FP
                LCD_WriteCmdData(0x000C, 0x0000); // RGB interface setting R0Ch=0x0110 for RGB 18Bit and R0Ch=0111for RGB
             -16Bit
                LCD_WriteCmdData(0x000F, 0x0B01); // Set frame rate
                LCD_WriteCmdData(0x0020, 0x0000); // Set GRAM Address
                LCD_WriteCmdData(0x0021, 0x0000); // Set GRAM Address
                //*************Power On sequence ****************//
                delay_ms(50); // Delay 50ms
                LCD_WriteCmdData(0x0010, 0x0A00); // Set SAP,DSTB,STB
                LCD_WriteCmdData(0x0011, 0x1038); // Set APON,PON,AON,VCI1EN,VC
                delay_ms(50); // Delay 50ms
                LCD_WriteCmdData(0x0012, 0x2121); // Internal reference voltage= Vci;
                LCD_WriteCmdData(0x0013, 0x007A); // Set GVDD
                LCD_WriteCmdData(0x0014, 0x595c); // Set VCOMH/VCOML voltage      
                //------------- Set GRAM area ------------------//
                LCD_WriteCmdData(0x0030, 0x0000);
                LCD_WriteCmdData(0x0031, 0x00DB);
                LCD_WriteCmdData(0x0032, 0x0000);
                LCD_WriteCmdData(0x0033, 0x0000);
                LCD_WriteCmdData(0x0034, 0x00DB);
                LCD_WriteCmdData(0x0035, 0x0000);
                LCD_WriteCmdData(0x0036, 0x00AF);
                LCD_WriteCmdData(0x0037, 0x0000);
                LCD_WriteCmdData(0x0038, 0x00DB);
                LCD_WriteCmdData(0x0039, 0x0000);
                
                // ----------- Adjust the Gamma Curve ----------//
                LCD_WriteCmdData(0x0050, 0x0000);
                LCD_WriteCmdData(0x0051, 0x0704);
                LCD_WriteCmdData(0x0052, 0x0C08);
                LCD_WriteCmdData(0x0053, 0x0502);
                LCD_WriteCmdData(0x0054, 0x080C);
                LCD_WriteCmdData(0x0055, 0x0407);
                LCD_WriteCmdData(0x0056, 0x0000);
                LCD_WriteCmdData(0x0057, 0x0205);
                LCD_WriteCmdData(0x0058, 0x0000);
                LCD_WriteCmdData(0x0059, 0x0000);
                
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 10  

                delay_ms(50); // Delay 50ms
                LCD_WriteCmdData(0x0007, 0x1017);
              
              #endif
 554   1      
 555   1      #ifdef TFT24_ST7781R
                //ST7781R_HSD2.4
                //------------------------------------Display Control Setting--------------------------------------------
             ---//
                LCD_WriteCmdData(0x0001, 0x0100); //Output Direct
                LCD_WriteCmdData(0x0002, 0x0700); //Line Inversion
                LCD_WriteCmdData(0x0003, 0x5030); //Entry Mode (262K, BGR)
                LCD_WriteCmdData(0x0004, 0x0000); //Resize Control
                LCD_WriteCmdData(0x0008, 0x0302); //Display Control2 (Porch Setting)
                LCD_WriteCmdData(0x0009, 0x0000); //Display Control3
                LCD_WriteCmdData(0x000A, 0x0000); //Display Control4
                LCD_WriteCmdData(0x000C, 0x0000); // RGB Display Interface Control1
                LCD_WriteCmdData(0x000D, 0x0000); //Frame Marker Position
                LCD_WriteCmdData(0x000F, 0x0000); // RGB Display Interface Control2
                //-----------------------------------End Display Control setting-----------------------------------------
             -//
                delay_ms(100);
                //-------------------------------- Power Control Registers Initial --------------------------------------
             -//
                LCD_WriteCmdData(0x0010, 0x10E0); //Power Control1
                //---------------------------------End Power Control Registers Initial -------------------------------//
                delay_ms(100); //Delay 100ms
                //-------------------------------------Gamma Cluster Setting-------------------------------------------//
                LCD_WriteCmdData(0x0030, 0x0000);
                LCD_WriteCmdData(0x0031, 0x0406);
                LCD_WriteCmdData(0x0032, 0x0302);
                LCD_WriteCmdData(0x0035, 0x0006);
                LCD_WriteCmdData(0x0036, 0x0700);
                LCD_WriteCmdData(0x0037, 0x0000);
                LCD_WriteCmdData(0x0038, 0x0406);
                LCD_WriteCmdData(0x0039, 0x0302);
                LCD_WriteCmdData(0x003c, 0x0006);
                LCD_WriteCmdData(0x003d, 0x0700);
                //---------------------------------------End Gamma Setting---------------------------------------------//
                //----------------------------------Display Windows 240 X 320----------------------------------------//
                LCD_WriteCmdData(0x0020, 0x0000); // Horizontal Address Start Position
                LCD_WriteCmdData(0x0021, 0x0000); // Vertical Address Start Position
                LCD_WriteCmdData(0x0050, 0x0000); // Horizontal Address Start Position
                LCD_WriteCmdData(0x0051, 0x00ef); // Horizontal Address End Position
                LCD_WriteCmdData(0x0052, 0x0000); // Vertical Address Start Position
                LCD_WriteCmdData(0x0053, 0x013f); // Vertical Address End Position
                //----------------------------------End Display Windows 240 X 320----------------------------------//
                //-------------------------------------------Frame Rate Setting------------------------------------------
             --//
                LCD_WriteCmdData(0x0060, 0xA700); //Gate scan control
                LCD_WriteCmdData(0x0061, 0x0001); //Non-display Area setting
                LCD_WriteCmdData(0x006A, 0x0000); //Vertical Scroll Control
                LCD_WriteCmdData(0x0090, 0x0030); //RTNI setting
                LCD_WriteCmdData(0x0095, 0x021E); //Panel Interface Control 4
                //-------------------------------------------END Frame Rate setting------------------------------------//
                //----------------------------------Partial Image Display Initial----------------------------------------
             -//
                LCD_WriteCmdData(0x0080, 0x0000); // Partial Image 1 Display Position
                LCD_WriteCmdData(0x0081, 0x0000); // Partial Image 1 Area (Start Line)
                LCD_WriteCmdData(0x0082, 0x0000); // Partial Image 1 Area (End Line)
                LCD_WriteCmdData(0x0083, 0x0000); // Partial Image 2 Display Position
                LCD_WriteCmdData(0x0084, 0x0000); // Partial Image 2 Area (Start Line)
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 11  

                LCD_WriteCmdData(0x0085, 0x0000); // Partial Image 2 Area (End Line)
                //-----------------------------------END Partial Image Display Initial ----------------------------------
             -//
                //--------------------------------- Power Supply Startup 1 Setting------------------------------------//
                LCD_WriteCmdData(0x00FF, 0x0001); //CMD 2 Enable
                LCD_WriteCmdData(0x00B0, 0x310E); //Power Control2
                LCD_WriteCmdData(0x00FF, 0x0000); // CMD 2 Disable
                //--------------------------------- End Power Supply Startup 2 Setting------------------------------//
                delay_ms(100); //Delay 100ms
                LCD_WriteCmdData(0x0007, 0x0133); //Display Control1
                delay_ms(50); //Delay 50ms
                
                LCD_WriteCmd(0x0022);
              #endif
 620   1      
 621   1      #ifdef TFT26_R61509V
                LCD_WriteCmd(0x0000);LCD_WriteData(0x0000); 
                LCD_WriteCmd(0x0000);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0000);LCD_WriteData(0x0000);  
                delay_ms(100);
                
                LCD_WriteCmd(0x0400);LCD_WriteData(0x6200); 
                LCD_WriteCmd(0x0008);LCD_WriteData(0x0808); 
                 
                LCD_WriteCmd(0x0300);LCD_WriteData(0x0C00);  
                LCD_WriteCmd(0x0301);LCD_WriteData(0x5A0B);  
                LCD_WriteCmd(0x0302);LCD_WriteData(0x0906); 
                LCD_WriteCmd(0x0303);LCD_WriteData(0x1017);  
                LCD_WriteCmd(0x0304);LCD_WriteData(0x2300);  
                LCD_WriteCmd(0x0305);LCD_WriteData(0x1700);  
                LCD_WriteCmd(0x0306);LCD_WriteData(0x6309); 
                LCD_WriteCmd(0x0307);LCD_WriteData(0x0C09); 
                LCD_WriteCmd(0x0308);LCD_WriteData(0x010C);  
                LCD_WriteCmd(0x0309);LCD_WriteData(0x2232); 
                
                LCD_WriteCmd(0x0010);LCD_WriteData(0x0016);  
                LCD_WriteCmd(0x0011);LCD_WriteData(0x0101);  
                LCD_WriteCmd(0x0012);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0013);LCD_WriteData(0x0001); 
                 
                LCD_WriteCmd(0x0100);LCD_WriteData(0x0330);  
                LCD_WriteCmd(0x0101);LCD_WriteData(0x0336);  
                LCD_WriteCmd(0x0103);LCD_WriteData(0x1000); 
                 
                LCD_WriteCmd(0x0280);LCD_WriteData(0x6100); 
                LCD_WriteCmd(0x0102);LCD_WriteData(0xBBB4); 
                delay_ms(100);
                
                LCD_WriteCmd(0x0001);LCD_WriteData(0x0100);  
                LCD_WriteCmd(0x0002);LCD_WriteData(0x0100);  
                LCD_WriteCmd(0x0003);LCD_WriteData(0x1030);  
                LCD_WriteCmd(0x0009);LCD_WriteData(0x0001);  
                LCD_WriteCmd(0x000C);LCD_WriteData(0x0000); 
                LCD_WriteCmd(0x0090);LCD_WriteData(0x0800); 
                LCD_WriteCmd(0x000F);LCD_WriteData(0x0000); 
                
                LCD_WriteCmd(0x0210);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0211);LCD_WriteData(0x00EF); 
                LCD_WriteCmd(0x0212);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0213);LCD_WriteData(0x018F);         //;400
                
                
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 12  

                LCD_WriteCmd(0x0500);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0501);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0502);LCD_WriteData(0x005F);  
                
                LCD_WriteCmd(0x0401);LCD_WriteData(0x0001);  
                LCD_WriteCmd(0x0404);LCD_WriteData(0x0000); 
                delay_ms(100);
                
                LCD_WriteCmd(0x0007);LCD_WriteData(0x0100); 
                delay_ms(100);
                  
                LCD_WriteCmd(0x0202);
              #endif
 681   1      
 682   1      #ifdef TFT26_ILI9325D
                //************* Start Initial Sequence **********// 
                LCD_WriteCmdData(0x0001, 0x0100); // set SS  and SM bit 
                LCD_WriteCmdData(0x0002, 0x0200); // set 1 line inversion 
                LCD_WriteCmdData(0x0003, 0x1030); // set GRAM write direction and BGR=1. 
                LCD_WriteCmdData(0x0004, 0x0000); // Resize register 
                LCD_WriteCmdData(0x0008, 0x0202); // set theback porch and front porch 
                LCD_WriteCmdData(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0] 
                LCD_WriteCmdData(0x000A, 0x0000); // FMARK function 
                LCD_WriteCmdData(0x000C, 0x0000); // RGB interface setting 
                LCD_WriteCmdData(0x000D, 0x0000); // Frame marker Position 
                LCD_WriteCmdData(0x000F, 0x0000); // RGB int erface polarity 
                //*************Power On sequence **************** // 
                LCD_WriteCmdData(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB 
                LCD_WriteCmdData(0x0011, 0x0007); // DC1[2:0 ], DC0[2:0], VC[2:0] 
                LCD_WriteCmdData(0x0012, 0x0000); // VREG1OUT voltage 
                LCD_WriteCmdData(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude 
                delay_ms(10);                         // Dis-charge capacitor power voltage 
                LCD_WriteCmdData(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB 
                LCD_WriteCmdData(0x0011, 0x0227); // R11h=0x 0221 at VCI=3.3V, DC1[2:0], DC0[2:0], VC[2:0] 
                delay_ms(10);                          // Delay 50ms 
                LCD_WriteCmdData(0x0012, 0x008D); // External reference voltage= Vci; 
                delay_ms(10);                          // Delay 50ms 
                LCD_WriteCmdData(0x0013, 0x1200); // VDV[4:0] for VCOM amplitude 
                LCD_WriteCmdData(0x0029, 0x0005); // VCM[5:0] for VCOMH 
                LCD_WriteCmdData(0x002B, 0x000C); // Frame Rate = 91Hz 
                delay_ms(10);                          // Delay 50ms 
                LCD_WriteCmdData(0x0020, 0x0000); // GRAM horizontal Address 
                LCD_WriteCmdData(0x0021, 0x0000); // GRAM Vertical Address 
                // ----------- Adjust the Gamma Curve ----------// 
                //a-Si TFT LCD Single Chip Driver 
                //240RGBx320 Resolution and 262K color  ILI9325D
                //The information contained herein is the exclusive property of ILI Technology Corp. and shall not be dis
             -tributed, reproduced, or disclosed in 
                //whole or in part without prior written permission of ILI Technology Corp.
                //Page 24 of 26  V0.14
                LCD_WriteCmdData(0x0030, 0x0000); 
                LCD_WriteCmdData(0x0031, 0x0303); 
                LCD_WriteCmdData(0x0032, 0x0103); 
                LCD_WriteCmdData(0x0035, 0x0103); 
                LCD_WriteCmdData(0x0036, 0x0004); 
                LCD_WriteCmdData(0x0037, 0x0406); 
                LCD_WriteCmdData(0x0038, 0x0404); 
                LCD_WriteCmdData(0x0039, 0x0707); 
                LCD_WriteCmdData(0x003C, 0x0301); 
                LCD_WriteCmdData(0x003D, 0x0004); 
                //------------------ Set GRAM area ---------------// 
                LCD_WriteCmdData(0x0050, 0x0000); // Horizontal GRAM Start Address 
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 13  

                LCD_WriteCmdData(0x0051, 0x00EF); // Horizontal GRAM End Address 
                LCD_WriteCmdData(0x0052, 0x0000); // Vertical GRAM Start Address 
                LCD_WriteCmdData(0x0053, 0x013F); // Vertical GRAM Start Address 
                LCD_WriteCmdData(0x0060, 0xA700); // Gate Sc an Line 
                LCD_WriteCmdData(0x0061, 0x0001); // NDL,VLE, REV 
                LCD_WriteCmdData(0x006A, 0x0000); // set scrolling line 
                //-------------- Partial Display Control ---------// 
                LCD_WriteCmdData(0x0080, 0x0000); 
                LCD_WriteCmdData(0x0081, 0x0000); 
                LCD_WriteCmdData(0x0082, 0x0000); 
                LCD_WriteCmdData(0x0083, 0x0000); 
                LCD_WriteCmdData(0x0084, 0x0000); 
                LCD_WriteCmdData(0x0085, 0x0000); 
                //-------------- Panel Control -------------------// 
                LCD_WriteCmdData(0x0090, 0x0010); 
                LCD_WriteCmdData(0x0092, 0x0600); 
                LCD_WriteCmdData(0x0007, 0x0133); // 262K color and display ON 
                
                LCD_WriteCmd(0x0022);
              #endif
 749   1      
 750   1        LCD_Display_Dir(TFTLCD_DIR);    //0：竖屏  1：横屏  默认竖屏
 751   1        LCD_Clear(BACK_COLOR);
 752   1      }
 753          
 754          //设置窗口,并自动设置画点坐标到窗口左上角(sx,sy).
 755          //sx,sy:窗口起始坐标(左上角)
 756          //width,height:窗口宽度和高度,必须大于0!!
 757          //窗体大小:width*height. 
 758          void LCD_Set_Window(u16 sx,u16 sy,u16 width,u16 height)
 759          {
 760   1      #ifdef TFT22_R61503B
 761   1      if(tftlcd_data.dir==0)  
 762   1        {
 763   2          LCD_WriteCmd(0x0050);
 764   2          LCD_WriteData(sx);       
 765   2          LCD_WriteCmd(0x0051);
 766   2          LCD_WriteData(width);  
 767   2          LCD_WriteCmd(0x0052);
 768   2          LCD_WriteData(sy);
 769   2          LCD_WriteCmd(0x0053);
 770   2          LCD_WriteData(height);
 771   2      
 772   2          LCD_WriteCmd(0x0020);
 773   2          LCD_WriteData(sx);
 774   2          LCD_WriteCmd(0x0021);
 775   2          LCD_WriteData(sy);
 776   2      
 777   2          LCD_WriteCmd(0x0022);
 778   2        
 779   2        }
 780   1        else
 781   1        {
 782   2          LCD_WriteCmd(0x0052);
 783   2          LCD_WriteData(sx);       
 784   2          LCD_WriteCmd(0x0053);
 785   2          LCD_WriteData(width);  
 786   2          LCD_WriteCmd(0x0050);
 787   2          LCD_WriteData(sy);
 788   2          LCD_WriteCmd(0x0051);
 789   2          LCD_WriteData(height);
 790   2      
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 14  

 791   2          LCD_WriteCmd(0x0021);
 792   2          LCD_WriteData(sx);
 793   2          LCD_WriteCmd(0x0020);
 794   2          LCD_WriteData(sy);
 795   2      
 796   2          LCD_WriteCmd(0x0022);
 797   2        }
 798   1        #endif
 799   1        
 800   1      #ifdef TFT22_ILI9225B
                if(tftlcd_data.dir==0)  
                {
                  LCD_WriteCmdData(0x0037, sx);
                  LCD_WriteCmdData(0x0036, width); 
                  LCD_WriteCmdData(0x0039, sy);
                  LCD_WriteCmdData(0x0038, height);
                
                  LCD_WriteCmdData(0x0020, sx);
                  LCD_WriteCmdData(0x0021, sy);
                
                  LCD_WriteCmd(0x0022);
                }
                else
                {
                  LCD_WriteCmdData(0x0039, sx);
                  LCD_WriteCmdData(0x0038, width); 
                  LCD_WriteCmdData(0x0037, sy);
                  LCD_WriteCmdData(0x0036, height);
                
                  LCD_WriteCmdData(0x0021, sx);
                  LCD_WriteCmdData(0x0020, sy);
                
                  LCD_WriteCmd(0x0022);
                }
              #endif
 826   1      
 827   1      #ifdef TFT24_ST7781R
                if(tftlcd_data.dir==0)  
                {
                  LCD_WriteCmdData(0x0050, sx); // Horizontal Address Start Position
                  LCD_WriteCmdData(0x0051, width); // Horizontal Address End Position
                  LCD_WriteCmdData(0x0052, sy); // Vertical Address Start Position
                  LCD_WriteCmdData(0x0053, height); // Vertical Address End Position
                
                  LCD_WriteCmdData(0x0020, sx); // Horizontal Address Start Position
                  LCD_WriteCmdData(0x0021, sy); // Vertical Address Start Position
                  LCD_WriteCmd(0x0022);   
                }
                else
                {
                  LCD_WriteCmdData(0x0052, sx); // Horizontal Address Start Position
                  LCD_WriteCmdData(0x0053, width); // Horizontal Address End Position
                  LCD_WriteCmdData(0x0050, sy); // Vertical Address Start Position
                  LCD_WriteCmdData(0x0051, height); // Vertical Address End Position
                
                  LCD_WriteCmdData(0x0021, sx); // Horizontal Address Start Position
                  LCD_WriteCmdData(0x0020, sy); // Vertical Address Start Position
                  LCD_WriteCmd(0x0022); 
                } 
              #endif
 851   1      
 852   1      #ifdef TFT26_R61509V
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 15  

                if(tftlcd_data.dir==0)  
                {
                  LCD_WriteCmd(0x0210);   LCD_WriteData(sx);
                  LCD_WriteCmd(0x0211);   LCD_WriteData(width);
                  LCD_WriteCmd(0x0212);   LCD_WriteData(sy);
                  LCD_WriteCmd(0x0213);   LCD_WriteData(height);
                
                  LCD_WriteCmd(0x0200);   LCD_WriteData(sx);
                  LCD_WriteCmd(0x0201);   LCD_WriteData(sy);
                
                  LCD_WriteCmd(0x0202);
                }
                else
                {
                  LCD_WriteCmd(0x0212);   LCD_WriteData(sx);
                  LCD_WriteCmd(0x0213);   LCD_WriteData(width);
                  LCD_WriteCmd(0x0210);   LCD_WriteData(sy);
                  LCD_WriteCmd(0x0211);   LCD_WriteData(height);
                
                  LCD_WriteCmd(0x0201);   LCD_WriteData(sx);
                  LCD_WriteCmd(0x0200);   LCD_WriteData(sy);
                
                  LCD_WriteCmd(0x0202);
                }
              #endif
 878   1      
 879   1      #ifdef TFT26_ILI9325D
                if(tftlcd_data.dir==0)  
                {
                  LCD_WriteCmdData(0x0050, sx); // Horizontal GRAM Start Address 
                  LCD_WriteCmdData(0x0051, width); // Horizontal GRAM End Address 
                  LCD_WriteCmdData(0x0052, sy); // Vertical GRAM Start Address 
                  LCD_WriteCmdData(0x0053, height); // Vertical GRAM Start Address 
                
                  LCD_WriteCmdData(0x0020, sx); // GRAM horizontal Address 
                  LCD_WriteCmdData(0x0021, sy); // GRAM Vertical Address
                  LCD_WriteCmd(0x0022);
                }
                else
                {
                  LCD_WriteCmdData(0x0052, sx); // Horizontal GRAM Start Address 
                  LCD_WriteCmdData(0x0053, width); // Horizontal GRAM End Address 
                  LCD_WriteCmdData(0x0050, sy); // Vertical GRAM Start Address 
                  LCD_WriteCmdData(0x0051, height); // Vertical GRAM Start Address 
                
                  LCD_WriteCmdData(0x0021, sx); // GRAM horizontal Address 
                  LCD_WriteCmdData(0x0020, sy); // GRAM Vertical Address
                  LCD_WriteCmd(0x0022);
                }
              #endif
 903   1      
 904   1      }
 905          
 906          //读取个某点的颜色值   
 907          //x,y:坐标
 908          //返回值:此点的颜色
 909          u16 LCD_ReadPoint(u16 x,u16 y)
 910          {
 911   1       u16 r=0,g=0x0001,b=0x0001,dat;
 912   1        if(x>=tftlcd_data.width||y>=tftlcd_data.height)return 0;  //超过了范围,直接返回        
 913   1        LCD_Set_Window(x, y, x, y);
 914   1        
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 16  

 915   1      #ifdef TFT22_R61503B
 916   1        
 917   1      
 918   1        //LCD_Set_Window(x, y, x, y);
 919   1        dat=LCD_ReadData();     //dummy Read
 920   1        dat=LCD_ReadData();
 921   1      
 922   1          
 923   1        b=dat>>11;         
 924   1        g=(dat>>5)&0x003f;
 925   1        r=dat&0x001f;
 926   1        dat=(r<<11)|(g<<5)|(b); 
 927   1                         
 928   1        r=dat;
 929   1                       
 930   1        
 931   1      #endif
 932   1      
 933   1      #ifdef TFT22_ILI9225B 
                LCD_WriteCmd(0X0022);                      
                r=LCD_ReadData();     //dummy Read
                r=LCD_ReadData();     //dummy Read
                r=LCD_ReadData();     //实际坐标颜色
              #endif
 939   1      
 940   1      #ifdef TFT24_ST7781R  
                LCD_WriteCmd(0X0022);
                r=LCD_ReadData();     //dummy Read                         
                r=LCD_ReadData();     //实际坐标颜色
              #endif
 945   1      
 946   1      #ifdef TFT26_R61509V  
                LCD_WriteCmd(0X0202);                      
                r=LCD_ReadData();     //dummy Read
                r=LCD_ReadData();     //dummy Read
                r=LCD_ReadData();     //实际坐标颜色
              #endif
 952   1        
 953   1      #ifdef TFT26_ILI9325D 
                LCD_WriteCmd(0X0022);
                r=LCD_ReadData();     //dummy Read                         
                r=LCD_ReadData();     //实际坐标颜色
              #endif  
 958   1      
 959   1        return r;
 960   1      }
 961          
 962          //清屏函数
 963          //color:要清屏的填充色
 964          void LCD_Clear(u16 color)
 965          {
 966   1        u16 i=0, j=0 ;
 967   1      
 968   1        LCD_Set_Window(0, 0, tftlcd_data.width-1, tftlcd_data.height-1);   //作用区域
 969   1          for(i=0; i<tftlcd_data.width; i++)
 970   1        {
 971   2          for (j=0; j<tftlcd_data.height; j++)
 972   2          {
 973   3            LCD_WriteData_Color(color);
 974   3          }
 975   2        } 
 976   1      }
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 17  

 977          
 978          //在指定区域内填充单个颜色
 979          //(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)   
 980          //color:要填充的颜色
 981          void LCD_Fill(u16 xState,u16 yState,u16 xEnd,u16 yEnd,u16 color)
 982          {          
 983   1        u16 temp=0;
 984   1      
 985   1          if((xState > xEnd) || (yState > yEnd))
 986   1          {
 987   2              return;
 988   2          }   
 989   1        LCD_Set_Window(xState, yState, xEnd, yEnd); 
 990   1          xState = xEnd - xState + 1;
 991   1        yState = yEnd - yState + 1;
 992   1      
 993   1        while(xState--)
 994   1        {
 995   2          temp = yState;
 996   2          while (temp--)
 997   2          {     
 998   3            LCD_WriteData_Color(color); 
 999   3          }
1000   2        } 
1001   1      } 
1002          
1003          //在指定区域内填充指定颜色块       
1004          //(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)   
1005          //color:要填充的颜色
1006          void LCD_Color_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 *color)
1007          {  
1008   1        u16 height,width;
1009   1        u16 i,j;
1010   1        width=ex-sx+1;      //得到填充的宽度
1011   1        height=ey-sy+1;     //高度
1012   1        LCD_Set_Window(sx, sy,ex, ey);
1013   1        for(i=0;i<height;i++)
1014   1        {
1015   2          for(j=0;j<width;j++)
1016   2          {
1017   3            LCD_WriteData_Color(color[i*width+j]);
1018   3          }
1019   2        }       
1020   1      }
1021          
1022          //画点
1023          //x,y:坐标
1024          //FRONT_COLOR:此点的颜色
1025          void LCD_DrawPoint(u16 x,u16 y)
1026          {
1027   1        LCD_Set_Window(x, y, x, y);  //设置点的位置
1028   1        LCD_WriteData_Color(FRONT_COLOR); 
1029   1      }
1030          
1031          //快速画点
1032          //x,y:坐标
1033          //color:颜色
1034          void LCD_DrawFRONT_COLOR(u16 x,u16 y,u16 color)
1035          {    
1036   1        LCD_Set_Window(x, y, x, y);
1037   1        LCD_WriteData_Color(color); 
1038   1      } 
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 18  

1039          
1040          //画一个大点
1041          //2*2的点        
1042          void LCD_DrawBigPoint(u16 x,u16 y,u16 color)
1043          {     
1044   1        LCD_DrawFRONT_COLOR(x,y,color);//中心点 
1045   1        LCD_DrawFRONT_COLOR(x+1,y,color);
1046   1        LCD_DrawFRONT_COLOR(x,y+1,color);
1047   1        LCD_DrawFRONT_COLOR(x+1,y+1,color);       
1048   1      }
1049          
1050          //画线
1051          //x1,y1:起点坐标
1052          //x2,y2:终点坐标  
1053          void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
1054          {
1055   1        u16 t=0; 
1056   1        int xerr=0,yerr=0,delta_x,delta_y,distance; 
1057   1        int incx,incy,uRow,uCol; 
1058   1        delta_x=x2-x1; //计算坐标增量 
1059   1        delta_y=y2-y1; 
1060   1        uRow=x1; 
1061   1        uCol=y1; 
1062   1        if(delta_x>0)incx=1; //设置单步方向 
1063   1        else if(delta_x==0)incx=0;//垂直线 
1064   1        else {incx=-1;delta_x=-delta_x;} 
1065   1        if(delta_y>0)incy=1; 
1066   1        else if(delta_y==0)incy=0;//水平线 
1067   1        else{incy=-1;delta_y=-delta_y;} 
1068   1        if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
1069   1        else distance=delta_y; 
1070   1        for(t=0;t<=distance+1;t++ )//画线输出 
1071   1        {  
1072   2          LCD_DrawPoint(uRow,uCol);//画点 
1073   2          xerr+=delta_x ; 
1074   2          yerr+=delta_y ; 
1075   2          if(xerr>distance) 
1076   2          { 
1077   3            xerr-=distance; 
1078   3            uRow+=incx; 
1079   3          } 
1080   2          if(yerr>distance) 
1081   2          { 
1082   3            yerr-=distance; 
1083   3            uCol+=incy; 
1084   3          } 
1085   2        }  
1086   1      } 
1087          
1088          void LCD_DrawLine_Color(u16 x1, u16 y1, u16 x2, u16 y2,u16 color)
1089          {
1090   1        u16 t; 
1091   1        int xerr=0,yerr=0,delta_x,delta_y,distance; 
1092   1        int incx,incy,uRow,uCol; 
1093   1        delta_x=x2-x1; //计算坐标增量 
1094   1        delta_y=y2-y1; 
1095   1        uRow=x1; 
1096   1        uCol=y1; 
1097   1        if(delta_x>0)incx=1; //设置单步方向 
1098   1        else if(delta_x==0)incx=0;//垂直线 
1099   1        else {incx=-1;delta_x=-delta_x;} 
1100   1        if(delta_y>0)incy=1; 
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 19  

1101   1        else if(delta_y==0)incy=0;//水平线 
1102   1        else{incy=-1;delta_y=-delta_y;} 
1103   1        if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
1104   1        else distance=delta_y; 
1105   1        for(t=0;t<=distance+1;t++ )//画线输出 
1106   1        {  
1107   2          LCD_DrawFRONT_COLOR(uRow,uCol,color);//画点 
1108   2          xerr+=delta_x ; 
1109   2          yerr+=delta_y ; 
1110   2          if(xerr>distance) 
1111   2          { 
1112   3            xerr-=distance; 
1113   3            uRow+=incx; 
1114   3          } 
1115   2          if(yerr>distance) 
1116   2          { 
1117   3            yerr-=distance; 
1118   3            uCol+=incy; 
1119   3          } 
1120   2        }  
1121   1      } 
1122          
1123          
1124          // 画一个十字的标记
1125          // x：标记的X坐标
1126          // y：标记的Y坐标
1127          // color：标记的颜色
1128          void LCD_DrowSign(u16 x, u16 y, u16 color)
1129          {
1130   1          u8 i;
1131   1      
1132   1          /* 画点 */
1133   1          LCD_Set_Window(x-1, y-1, x+1, y+1);
1134   1          for(i=0; i<9; i++)
1135   1          {
1136   2          LCD_WriteData_Color(color);   
1137   2          }
1138   1      
1139   1          /* 画竖 */
1140   1          LCD_Set_Window(x-4, y, x+4, y);
1141   1          for(i=0; i<9; i++)
1142   1          {
1143   2          LCD_WriteData_Color(color); 
1144   2          }
1145   1      
1146   1          /* 画横 */
1147   1          LCD_Set_Window(x, y-4, x, y+4);
1148   1          for(i=0; i<9; i++)
1149   1          {
1150   2          LCD_WriteData_Color(color); 
1151   2          }
1152   1      }
1153          
1154          //画矩形    
1155          //(x1,y1),(x2,y2):矩形的对角坐标
1156          void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2)
1157          {
1158   1        LCD_DrawLine(x1,y1,x2,y1);
1159   1        LCD_DrawLine(x1,y1,x1,y2);
1160   1        LCD_DrawLine(x1,y2,x2,y2);
1161   1        LCD_DrawLine(x2,y1,x2,y2);
1162   1      }
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 20  

1163          //在指定位置画一个指定大小的圆
1164          //(x,y):中心点
1165          //r    :半径
1166          void LCD_Draw_Circle(u16 x0,u16 y0,u8 r)
1167          {
1168   1        int a,b;
1169   1        int di;
1170   1        a=0;b=r;    
1171   1        di=3-(r<<1);             //判断下个点位置的标志
1172   1        while(a<=b)
1173   1        {
1174   2          LCD_DrawPoint(x0+a,y0-b);             //5
1175   2          LCD_DrawPoint(x0+b,y0-a);             //0           
1176   2          LCD_DrawPoint(x0+b,y0+a);             //4               
1177   2          LCD_DrawPoint(x0+a,y0+b);             //6 
1178   2          LCD_DrawPoint(x0-a,y0+b);             //1       
1179   2          LCD_DrawPoint(x0-b,y0+a);             
1180   2          LCD_DrawPoint(x0-a,y0-b);             //2             
1181   2            LCD_DrawPoint(x0-b,y0-a);             //7                
1182   2          a++;
1183   2          //使用Bresenham算法画圆     
1184   2          if(di<0)di +=4*a+6;   
1185   2          else
1186   2          {
1187   3            di+=10+4*(a-b);   
1188   3            b--;
1189   3          }                 
1190   2        }
1191   1      } 
1192          
1193          
1194          //在指定位置显示一个字符
1195          //x,y:起始坐标
1196          //num:要显示的字符:" "--->"~"
1197          //size:字体大小 12/16/24
1198          //mode:叠加方式(1)还是非叠加方式(0)
1199          void LCD_ShowChar(u16 x,u16 y,u8 num,u8 size,u8 mode)
1200          {                 
1201   1          u8 temp,t1,t;
1202   1        u16 y0=y;
1203   1        u8 csize=(size/8+((size%8)?1:0))*(size/2);    //得到字体一个字符对应点阵集所占的字节数  
1204   1        num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
1205   1        for(t=0;t<csize;t++)
1206   1        {   
1207   2          if(size==12)temp=ascii_1206[num][t];    //调用1206字体
1208   2          else if(size==16)temp=ascii_1608[num][t]; //调用1608字体
1209   2          else if(size==24)temp=ascii_2412[num][t]; //调用2412字体
1210   2          else return;                //没有的字库
1211   2          for(t1=0;t1<8;t1++)
1212   2          {         
1213   3            if(temp&0x80)LCD_DrawFRONT_COLOR(x,y,FRONT_COLOR);
1214   3            else if(mode==0)LCD_DrawFRONT_COLOR(x,y,BACK_COLOR);
1215   3            temp<<=1;
1216   3            y++;
1217   3            if(y>=tftlcd_data.height)return;    //超区域了
1218   3            if((y-y0)==size)
1219   3            {
1220   4              y=y0;
1221   4              x++;
1222   4              if(x>=tftlcd_data.width)return; //超区域了
1223   4              break;
1224   4            }
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 21  

1225   3          }    
1226   2        }                 
1227   1      }   
1228          //m^n函数
1229          //返回值:m^n次方.
1230          u32 LCD_Pow(u8 m,u8 n)
1231          {
1232   1        u32 result=1;  
1233   1        while(n--)result*=m;    
1234   1        return result;
1235   1      }      
1236          //显示数字,高位为0,则不显示
1237          //x,y :起点坐标  
1238          //len :数字的位数
1239          //size:字体大小
1240          //color:颜色 
1241          //num:数值(0~4294967295);  
1242          void LCD_ShowNum(u16 x,u16 y,u32 num,u8 len,u8 size)
1243          {           
1244   1        u8 t,temp;
1245   1        u8 enshow=0;               
1246   1        for(t=0;t<len;t++)
1247   1        {
1248   2          temp=(num/LCD_Pow(10,len-t-1))%10;
1249   2          if(enshow==0&&t<(len-1))
1250   2          {
1251   3            if(temp==0)
1252   3            {
1253   4              LCD_ShowChar(x+(size/2)*t,y,' ',size,0);
1254   4              continue;
1255   4            }else enshow=1; 
1256   3             
1257   3          }
1258   2          LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,0); 
1259   2        }
1260   1      } 
1261          
1262          //显示数字,高位为0,还是显示
1263          //x,y:起点坐标
1264          //num:数值(0~999999999);   
1265          //len:长度(即要显示的位数)
1266          //size:字体大小
1267          //mode:
1268          //[7]:0,不填充;1,填充0.
1269          //[6:1]:保留
1270          //[0]:0,非叠加显示;1,叠加显示.
1271          void LCD_ShowxNum(u16 x,u16 y,u32 num,u8 len,u8 size,u8 mode)
1272          {  
1273   1        u8 t,temp;
1274   1        u8 enshow=0;               
1275   1        for(t=0;t<len;t++)
1276   1        {
1277   2          temp=(num/LCD_Pow(10,len-t-1))%10;
1278   2          if(enshow==0&&t<(len-1))
1279   2          {
1280   3            if(temp==0)
1281   3            {
1282   4              if(mode&0X80)LCD_ShowChar(x+(size/2)*t,y,'0',size,mode&0X01);  
1283   4              else LCD_ShowChar(x+(size/2)*t,y,' ',size,mode&0X01);  
1284   4              continue;
1285   4            }else enshow=1; 
1286   3             
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 22  

1287   3          }
1288   2          LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,mode&0X01); 
1289   2        }
1290   1      } 
1291          //显示字符串
1292          //x,y:起点坐标
1293          //width,height:区域大小  
1294          //size:字体大小
1295          //*p:字符串起始地址     
1296          void LCD_ShowString(u16 x,u16 y,u16 width,u16 height,u8 size,u8 *p)
1297          {         
1298   1        u8 x0=x;
1299   1        width+=x;
1300   1        height+=y;
1301   1          while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
1302   1          {       
1303   2              if(x>=width){x=x0;y+=size;}
1304   2              if(y>=height)break;//退出
1305   2              LCD_ShowChar(x,y,*p,size,0);
1306   2              x+=size/2;
1307   2              p++;
1308   2          }  
1309   1      }
1310          
1311          /****************************************************************************
1312          *函数名：LCD_ShowFontHZ
1313          *输  入：x：汉字显示的X坐标
1314          *      * y：汉字显示的Y坐标
1315          *      * cn：要显示的汉字
1316          *      * wordColor：文字的颜色
1317          *      * backColor：背景颜色
1318          *输  出：
1319          *功  能：写二号楷体汉字
1320          ****************************************************************************/
1321          #if 1
1322          void LCD_ShowFontHZ(u16 x, u16 y, u8 *cn)  
1323          {  
1324   1        u8 i, j, wordNum;
1325   1        u16 color;
1326   1        while (*cn != '\0')
1327   1        {
1328   2          LCD_Set_Window(x, y, x+31, y+28);
1329   2          for (wordNum=0; wordNum<20; wordNum++)
1330   2          { //wordNum扫描字库的字数
1331   3            if ((CnChar32x29[wordNum].Index[0]==*cn)
1332   3                 &&(CnChar32x29[wordNum].Index[1]==*(cn+1)))
1333   3            {
1334   4              
1335   4              for(i=0; i<116; i++) 
1336   4              { //MSK的位数
1337   5                color=CnChar32x29[wordNum].Msk[i];
1338   5                for(j=0;j<8;j++) 
1339   5                {
1340   6                  if((color&0x80)==0x80)
1341   6                  {
1342   7                    LCD_WriteData_Color(FRONT_COLOR);             
1343   7                  }             
1344   6                  else
1345   6                  {
1346   7                    LCD_WriteData_Color(BACK_COLOR); 
1347   7                  } 
1348   6                  color<<=1;
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 23  

1349   6                }//for(j=0;j<8;j++)结束
1350   5              }    
1351   4            }
1352   3          } //for (wordNum=0; wordNum<20; wordNum++)结束  
1353   2          cn += 2;
1354   2          x += 32;
1355   2        }
1356   1      }
1357          #endif
1358          
1359          
1360          #if 0
              void LCD_ShowFontHZ(u16 x, u16 y, u8 *cn)
              {
                u8 i, j, wordNum;
                u16 color;
                u16 x0=x; 
                u16 y0=y; 
                while (*cn != '\0')
                {
                  for (wordNum=0; wordNum<20; wordNum++)
                  { //wordNum扫描字库的字数
                    if ((CnChar32x29[wordNum].Index[0]==*cn)
                         &&(CnChar32x29[wordNum].Index[1]==*(cn+1)))
                    {
                      for(i=0; i<116; i++) 
                      { //MSK的位数
                        color=CnChar32x29[wordNum].Msk[i];
                        for(j=0;j<8;j++) 
                        {
                          if((color&0x80)==0x80)
                          {
                            LCD_DrawFRONT_COLOR(x,y,FRONT_COLOR);
                          }             
                          else
                          {
                            LCD_DrawFRONT_COLOR(x,y,BACK_COLOR);
                          } 
                          color<<=1;
                          x++;
                          if((x-x0)==32)
                          {
                            x=x0;
                            y++;
                            if((y-y0)==29)
                            {
                              y=y0;
                            }
                          }
                        }//for(j=0;j<8;j++)结束
                      } 
                    }
                    
                  } //for (wordNum=0; wordNum<20; wordNum++)结束  
                  cn += 2;
                  x += 32;
                  x0=x;
                }
              } 
              #endif
1409          
1410          void LCD_ShowPicture(u16 x, u16 y, u16 wide, u16 high,u8 *pic)
C51 COMPILER V9.59.0.0   TFTLCD                                                            06/12/2019 10:23:55 PAGE 24  

1411          {
1412   1        u16 temp = 0;
1413   1        long tmp=0,num=0;
1414   1        LCD_Set_Window(x, y, x+wide-1, y+high-1);
1415   1        num = wide * high*2 ;
1416   1        do
1417   1        {  
1418   2          temp = pic[tmp + 1];
1419   2          temp = temp << 8;
1420   2          temp = temp | pic[tmp];
1421   2          LCD_WriteData_Color(temp);//逐点显示
1422   2          tmp += 2;
1423   2        }
1424   1        while(tmp < num); 
1425   1      }
1426          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5768    ----
   CONSTANT SIZE    =   7155    ----
   XDATA SIZE       =     11     234
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
